// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sloth.Infrastructure.DatabaseContext;

#nullable disable

namespace sloth.Infrastructure.Migrations
{
    [DbContext(typeof(SlothDbContext))]
    partial class SlothDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sloth.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("sloth.Domain.Entities.ClientProductLink", b =>
                {
                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ClientID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ClientProductLink");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<Guid?>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClosedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentTeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ClosedByID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("CurrentOwnerID");

                    b.HasIndex("CurrentTeamID");

                    b.HasIndex("LastModifiedByID");

                    b.HasIndex("PriorityID");

                    b.HasIndex("StatusID");

                    b.ToTable("Job", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobAssignment", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobID", "TeamID");

                    b.HasIndex("AssignedByID");

                    b.HasIndex("TeamID");

                    b.HasIndex("UserID");

                    b.ToTable("JobAssignment");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobAssignmentHistory", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PreviousOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobID", "ChangeDate");

                    b.HasIndex("ChangedByID");

                    b.HasIndex("CurrentOwnerID");

                    b.HasIndex("PreviousOwnerID");

                    b.HasIndex("TeamID");

                    b.ToTable("JobAssignmentHistory");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommentedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalCommentID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentedByID");

                    b.HasIndex("JobID");

                    b.HasIndex("OriginalCommentID");

                    b.ToTable("JobComment");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobFile", b =>
                {
                    b.Property<Guid>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("FileID");

                    b.HasIndex("JobID");

                    b.ToTable("JobFile");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobPriorityHistory", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewPriorityID")
                        .HasColumnType("int");

                    b.Property<int>("PreviousPriorityID")
                        .HasColumnType("int");

                    b.HasKey("JobID", "ChangeDate");

                    b.HasIndex("ChangedByID");

                    b.HasIndex("NewPriorityID");

                    b.HasIndex("PreviousPriorityID");

                    b.ToTable("JobPriorityHistory");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobProductLink", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("JobID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("JobProductLink");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobStatusHistory", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewStatusID")
                        .HasColumnType("int");

                    b.Property<int>("PreviousStatusID")
                        .HasColumnType("int");

                    b.HasKey("JobID", "ChangeDate");

                    b.HasIndex("ChangedByID");

                    b.HasIndex("NewStatusID");

                    b.HasIndex("PreviousStatusID");

                    b.ToTable("JobStatusHistory");
                });

            modelBuilder.Entity("sloth.Domain.Entities.LockedPassword", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("LockedPassword");
                });

            modelBuilder.Entity("sloth.Domain.Entities.LockedUser", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("LockedUser");
                });

            modelBuilder.Entity("sloth.Domain.Entities.OwnerStatusMap", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("TeamID", "StatusID");

                    b.HasIndex("StatusID");

                    b.ToTable("OwnerStatusMap");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Priority", b =>
                {
                    b.Property<int>("PriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityID"));

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<string>("PriorityValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityID");

                    b.HasIndex("PriorityLevel")
                        .IsUnique();

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("sloth.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("sloth.Domain.Entities.ResetSecurityCode", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("ResetSecurityCode");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndState")
                        .HasColumnType("bit");

                    b.Property<bool>("OwnerChange")
                        .HasColumnType("bit");

                    b.Property<string>("StatusValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StatusID");

                    b.HasIndex("StatusID", "Type")
                        .IsUnique();

                    b.ToTable("Status");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("sloth.Domain.Entities.TeamProductLink", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("TeamID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("TeamProductLink");
                });

            modelBuilder.Entity("sloth.Domain.Entities.TeamStatusMap", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("TeamID", "StatusID");

                    b.HasIndex("StatusID");

                    b.ToTable("TeamStatusMap");
                });

            modelBuilder.Entity("sloth.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("sloth.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleCode")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("sloth.Domain.Entities.UserRoleLink", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoleLink");
                });

            modelBuilder.Entity("sloth.Domain.Entities.UserTeamLink", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTeamLink");
                });

            modelBuilder.Entity("sloth.Domain.Entities.Bug", b =>
                {
                    b.HasBaseType("sloth.Domain.Entities.Job");

                    b.Property<int>("BugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BugID"));

                    b.Property<DateTime>("RaisedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("BugID")
                        .IsUnique()
                        .HasFilter("[BugID] IS NOT NULL");

                    b.ToTable("Bug", (string)null);
                });

            modelBuilder.Entity("sloth.Domain.Entities.Query", b =>
                {
                    b.HasBaseType("sloth.Domain.Entities.Job");

                    b.Property<int>("QueryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryID"));

                    b.Property<DateTime>("RaisedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("QueryID")
                        .IsUnique()
                        .HasFilter("[QueryID] IS NOT NULL");

                    b.ToTable("Query", (string)null);
                });

            modelBuilder.Entity("sloth.Domain.Entities.ClientProductLink", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.Job", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("sloth.Domain.Entities.User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedByID");

                    b.HasOne("sloth.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", "CurrentOwner")
                        .WithMany()
                        .HasForeignKey("CurrentOwnerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("sloth.Domain.Entities.Team", "CurrentTeam")
                        .WithMany()
                        .HasForeignKey("CurrentTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("sloth.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByID");

                    b.HasOne("sloth.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.Navigation("Client");

                    b.Navigation("ClosedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentOwner");

                    b.Navigation("CurrentTeam");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobAssignment", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("Assignments")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobAssignmentHistory", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", "ChengedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", "CurrentOwner")
                        .WithMany()
                        .HasForeignKey("CurrentOwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("AssignmentHistory")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", "PreviousOwner")
                        .WithMany()
                        .HasForeignKey("PreviousOwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChengedBy");

                    b.Navigation("CurrentOwner");

                    b.Navigation("PreviousOwner");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobComment", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("Comments")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.JobComment", null)
                        .WithMany("PreviousEdits")
                        .HasForeignKey("OriginalCommentID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CommentedBy");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobFile", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("Files")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobPriorityHistory", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("PriorityHistory")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Priority", "NewPriority")
                        .WithMany()
                        .HasForeignKey("NewPriorityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Priority", "PreviousPriority")
                        .WithMany()
                        .HasForeignKey("PreviousPriorityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("NewPriority");

                    b.Navigation("PreviousPriority");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobProductLink", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobStatusHistory", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithMany("StatusHistory")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Status", "NewStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Status", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("NewStatus");

                    b.Navigation("PreviousStatus");
                });

            modelBuilder.Entity("sloth.Domain.Entities.LockedPassword", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.LockedPassword", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.LockedUser", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.LockedUser", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.OwnerStatusMap", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.RefreshToken", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.ResetSecurityCode", b =>
                {
                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.ResetSecurityCode", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.TeamProductLink", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.TeamStatusMap", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.UserRoleLink", b =>
                {
                    b.HasOne("sloth.Domain.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.UserTeamLink", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sloth.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.Bug", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.Bug", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.Query", b =>
                {
                    b.HasOne("sloth.Domain.Entities.Job", null)
                        .WithOne()
                        .HasForeignKey("sloth.Domain.Entities.Query", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sloth.Domain.Entities.Job", b =>
                {
                    b.Navigation("AssignmentHistory");

                    b.Navigation("Assignments");

                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("PriorityHistory");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("sloth.Domain.Entities.JobComment", b =>
                {
                    b.Navigation("PreviousEdits");
                });
#pragma warning restore 612, 618
        }
    }
}
